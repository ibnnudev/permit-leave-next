generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Institution {
    id         Int      @id @default(autoincrement())
    name       String
    address    String
    phone      String
    created_at DateTime @default(now())
    updated_at DateTime @default(now()) @updatedAt

    employees     Employee[]
    approvalFlows ApprovalFlow[]
}

model Employee {
    id                Int      @id @default(autoincrement())
    institution_id    Int
    name              String
    gender            String
    position          String
    whatsapp_number   String
    address           String
    birth_place       String
    birth_date        DateTime
    join_date         DateTime
    marital_status    String
    employment_status String
    personal_email    String
    institution_email String
    religion          String
    last_education    String
    password          String
    role              Role     @default(EMPLOYEE)
    created_at        DateTime @default(now())
    updated_at        DateTime @default(now()) @updatedAt

    institution      Institution            @relation(fields: [institution_id], references: [id])
    submitted_leaves Leave[]                @relation("SubmittedLeaves")
    approved_leaves  Leave[]                @relation("ApprovedLeaves")
    leave_quotas     LeaveQuota[]
    approval_logs    ApprovalLog[]
    created_flows    ApprovalFlow[]         @relation("CreatedBy")
    approval_flows   ApprovalFlowEmployee[]
    notifications    Notification[]
}

enum Role {
    SUPERADMIN
    ADMIN
    EMPLOYEE
}

model LeaveType {
    id               Int      @id @default(autoincrement())
    name             String
    description      String
    max_days         Int
    require_document Boolean
    created_at       DateTime @default(now())
    updated_at       DateTime @default(now()) @updatedAt
    hierarchical     Boolean  @default(true)

    leaves        Leave[]
    quotas        LeaveQuota[]
    approvalFlows ApprovalFlow[]
}

model Leave {
    id                   Int         @id @default(autoincrement())
    employee_id          Int
    leave_type_id        Int
    start_date           DateTime
    end_date             DateTime
    reason               String
    status               LeaveStatus @default(IN_PROCESS)
    last_processed_level Int
    admin_notes          String?
    recorded_by          String?
    approved_by_id       Int?
    document             String?
    created_at           DateTime    @default(now())
    updated_at           DateTime    @default(now()) @updatedAt

    employee     Employee      @relation("SubmittedLeaves", fields: [employee_id], references: [id])
    leaveType    LeaveType     @relation(fields: [leave_type_id], references: [id])
    approvedBy   Employee?     @relation("ApprovedLeaves", fields: [approved_by_id], references: [id])
    approvalLogs ApprovalLog[]
}

enum LeaveStatus {
    PENDING
    IN_PROCESS
    APPROVED
    REJECTED
}

model LeaveQuota {
    id            Int @id @default(autoincrement())
    employee_id   Int
    leave_type_id Int
    year          Int
    total_quota   Int
    used_quota    Int

    employee  Employee  @relation(fields: [employee_id], references: [id])
    leaveType LeaveType @relation(fields: [leave_type_id], references: [id])

    @@unique([employee_id, leave_type_id, year])
}

model ApprovalFlow {
    id             Int  @id @default(autoincrement())
    institution_id Int
    leave_type_id  Int?
    level          Int
    created_by_id  Int

    institution Institution            @relation(fields: [institution_id], references: [id])
    leaveType   LeaveType?             @relation(fields: [leave_type_id], references: [id])
    createdBy   Employee               @relation("CreatedBy", fields: [created_by_id], references: [id])
    approvers   ApprovalFlowEmployee[]
}

model ApprovalFlowEmployee {
    id               Int @id @default(autoincrement())
    approval_flow_id Int
    employee_id      Int

    approvalFlow ApprovalFlow @relation(fields: [approval_flow_id], references: [id])
    employee     Employee     @relation(fields: [employee_id], references: [id])
}

model ApprovalLog {
    id                Int            @id @default(autoincrement())
    leave_id          Int
    employee_id       Int
    level             Int
    status            ApprovalStatus @default(PENDING)
    notes             String?
    approval_date     DateTime?
    approval_deadline DateTime?

    leave    Leave    @relation(fields: [leave_id], references: [id])
    employee Employee @relation(fields: [employee_id], references: [id])
}

enum ApprovalStatus {
    PENDING
    APPROVED
    REJECTED
    AUTO_APPROVED
}

model Notification {
    id          Int      @id @default(autoincrement())
    employee_id Int
    message     String
    is_read     Boolean  @default(false)
    created_at  DateTime @default(now())

    employee Employee @relation(fields: [employee_id], references: [id])
}
